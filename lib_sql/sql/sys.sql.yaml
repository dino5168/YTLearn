#使用 /DBQyery/{sql_key} = 參數 給 tableName
TABLE_LIST: |
  SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname NOT IN ('pg_catalog', 'information_schema');

#設定 資料表格欄位描述
TABLE_SCHEMAT_COMMENT: |
  SELECT
      cols.attname AS column_name,
      format_type(cols.atttypid, cols.atttypmod) AS data_type,
      d.description AS comment
  FROM
      pg_attribute cols
  JOIN
      pg_class c ON c.oid = cols.attrelid
  JOIN
      pg_namespace n ON n.oid = c.relnamespace
  LEFT JOIN
      pg_description d ON d.objoid = c.oid AND d.objsubid = cols.attnum
  WHERE
      c.relname = :table_name       -- ⚠️ 改成你的資料表名稱
      AND n.nspname = 'public'            -- ⚠️ schema 名稱（通常是 public）
      AND cols.attnum > 0
      AND NOT cols.attisdropped
  ORDER BY
      cols.attnum;

#檢核使用者 email 是否存在
# 使用 :email 參數傳入 email 字串
CHECK_USER_EMAIL: |
  SELECT email,user_status FROM users WHERE email = :email ;

#設定使用者 email 驗證狀態為已驗證 與 密碼
UPDATE_USER_EMAIL_VERIFY: |
  UPDATE users SET email_verified = true, password_hash = :password_hash WHERE email = :email;

#新增使用者
INSERT_USER_BY_REGISTER: |
  INSERT INTO users (email, password_hash,role_id, email_verified)
  VALUES (:email, :password_hash,:role_id, true)
  RETURNING id;
#使用Email 查詢使用者資料
GET_USER_BY_EMAIL: |
  SELECT * FROM users WHERE email = :email;

#更新使用者資料
UPDATE_USERS_USER_TOKEN: |
  UPDATE users
  SET user_token = :user_token
  WHERE email = :email;

#更新使用者狀態
UPDATE_USERS_USER_STATUS: |
  UPDATE users 
  set user_status = :user_status where email = :email
